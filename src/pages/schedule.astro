---
import Layout from '~/layouts/Layout.astro';
import { fetchScheduleData, fetchSearchData } from '~/utils/api.js'; // Pastikan fetchSearchData diimpor!

let processedSchedule = []; // Ini akan berisi data jadwal yang sudah dilengkapi gambar, id, dan slug

try {
  const res = await fetchScheduleData(); // Ambil data jadwal dari API Otakudesu
  const rawSchedule = res?.data || [];

  // Proses setiap hari dalam jadwal secara paralel
  const processDayPromises = rawSchedule.map(async (dailySchedule) => {
    // Proses setiap anime dalam daftar hari itu secara paralel
    const animeListWithDetailsPromises = dailySchedule.anime_list.map(async (anime) => {
      let displayImage = 'https://via.placeholder.com/250x350?text=No+Image';
      let watchPageId = '';
      let watchPageSlug = '';
      let displayRating = null; // Tambahkan variabel ini untuk rating

      const searchRes = await fetchSearchData(anime.anime_name);

      const matchedAnime = searchRes?.results?.find(
        (sr) => sr.title?.toLowerCase() === anime.anime_name.toLowerCase()
      ) || searchRes?.results?.[0];

      if (matchedAnime) {
        displayImage = matchedAnime.image || displayImage;
        watchPageId = matchedAnime.id;
        watchPageSlug = matchedAnime.slug;
        displayRating = matchedAnime.rating; // Ambil rating dari hasil pencarian
      } else {
          const parts = anime.url.split('/');
          watchPageSlug = parts[parts.length - 2];
          watchPageId = watchPageSlug;
      }

      return {
        ...anime,
        displayImage: displayImage,
        watchPageId: watchPageId,
        watchPageSlug: watchPageSlug,
        displayRating: displayRating, // Tambahkan rating yang sudah diambil
      };
    });

    // Tunggu semua promise anime dalam sehari selesai
    const animeListWithDetails = await Promise.all(animeListWithDetailsPromises);

    return {
      day: dailySchedule.day,
      anime_list: animeListWithDetails,
    };
  });

  // Tunggu semua promise hari selesai
  processedSchedule = await Promise.all(processDayPromises);

} catch (error) {
  console.error("Failed to fetch and process anime schedule:", error);
  processedSchedule = [];
}

// Urutkan hari (opsional, sesuaikan urutan hari di Indonesia)
const daysOrder = ["Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu", "Minggu", "Random"];

// Mengelompokkan dan mengurutkan berdasarkan hari (struktur sudah dikelompokkan)
const groupedSchedule = processedSchedule.reduce((acc, dailySchedule) => {
  acc[dailySchedule.day] = dailySchedule.anime_list;
  return acc;
}, {});

const sortedDays = Object.keys(groupedSchedule).sort((a, b) => {
  return daysOrder.indexOf(a) - daysOrder.indexOf(b);
});
---

<Layout title="Jadwal Anime" description="Jadwal rilis anime terbaru">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-center">Jadwal Anime</h1>

    {Object.keys(groupedSchedule).length > 0 ? (
      sortedDays.map(day => (
        <div class="mb-8">
          <h2 class="text-2xl font-bold mb-4 text-primary">{day}</h2>
          <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3 sm:gap-6">
            {groupedSchedule[day].map(anime => (
              <div class="card bg-base-200 shadow-xl group overflow-hidden relative">
              <figure class="relative w-full pb-[100%] sm:pb-[120%] md:pb-[140%] overflow-hidden">
            <img
                src={anime.displayImage}
                alt={anime.anime_name || 'Anime Image'}
                class="absolute inset-0 w-full h-full object-cover transform transition-transform duration-300 group-hover:scale-105"
            />
        </figure>
          <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent flex flex-col justify-end p-2 text-white">
          <h3 class="font-bold text-sm sm:text-base leading-tight mb-1">
          {anime.anime_name}
        </h3>
        {anime.displayRating && (
          <p class="text-xs sm:text-sm opacity-90 mb-1">Rating: {anime.displayRating}</p>
    )}
    <div class="card-actions justify-end mt-2">
      {anime.watchPageId && anime.watchPageSlug ? (
        <a href={`/watch/${anime.watchPageId}/${anime.watchPageSlug}`} class="btn btn-primary btn-xs">Lihat Detail</a>
      ) : (
        <button class="btn btn-primary btn-xs btn-disabled">Detail Tidak Tersedia</button>
      )}
    </div>
  </div>
</div>
            ))}
          </div>
        </div>
      ))
    ) : (
      <p class="text-center text-lg mt-8 text-warning">
        Tidak ada jadwal anime yang tersedia saat ini.
      </p>
    )}
  </div>
</Layout>
