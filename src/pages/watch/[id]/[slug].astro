---
export const prerender = false;
import Layout from "~/layouts/Layout.astro";
import Table from "~/components/ui/Table.astro";
import { fetchAnimeData } from "~/utils/api";

const { id, slug } = Astro.params;
const episode = Astro.url.searchParams.get("episode") ?? null;

// Validasi parameter
if (!id || !slug) {
    return new Response(null, { status: 404, statusText: "Not Found" });
}

// Ambil data anime
const res = await fetchAnimeData(id, slug);
if (!res) {
    return new Response(null, { status: 404, statusText: "Anime not found" });
}
const data = res;

// Ekstrak data episode dengan aman. Pastikan properti 'episode' ada dan merupakan array.
// Gunakan array kosong sebagai fallback jika tidak ada data episode.
const episodes = data.results.episode || [];
const totalEp = episodes?.at(-1) ?? 1; // Mengambil episode terakhir, default 1 jika tidak ada
const isFinished = data.results.details && data.results.details[2]?.data?.includes("Selesai"); // Memeriksa status selesai

// Tentukan episode yang sedang diputar
// Jika ada parameter 'episode' di URL, gunakan itu.
// Jika tidak, jika anime sudah selesai dan ada episode, gunakan episode pertama.
// Jika belum selesai atau tidak ada episode, gunakan episode terakhir.
const currentEpisodeNumber = episode ? parseInt(episode) : (isFinished && episodes.length > 0 ? episodes[0] : totalEp);

// Jika ada rating dan status, Anda bisa ekstrak di sini
// const displayRating = data.results.rating || null;
// const displayStatus = data.results.details?.find(d => d.title === "Status")?.data || null;
---

<link rel="stylesheet" href="https://cdn.vidstack.io/player/theme.css" />
<link rel="stylesheet" href="https://cdn.vidstack.io/player/video.css" />

<Layout title={data.results.title} description={data.results.description || data.results.title}>
  <div class="container mx-auto px-4 py-4 md:py-8">
    <div class="flex flex-col gap-6">

      {/* BLOCK 1: Video Player & Navigasi Episode */}
      <div class="bg-base-300 rounded-lg shadow-xl overflow-hidden p-2">
        <p
          id="playerInfo"
          class="aspect-video skeleton flex flex-col items-center justify-center text-center text-base-content/80 text-lg mb-2"
        >
          Memuat video player...
          <span class="loading loading-spinner loading-lg mt-4"></span>
        </p>
        <div
          id="player"
          data-poster={data.results.image}
          data-storage="player-storage"
          data-autoplay="true"
          data-playsinline
          class="aspect-video hidden rounded-md"
        >
          </div>
        <div class="flex justify-between items-center mx-2 mt-4 p-2 bg-base-200 rounded-lg">
          <button id="prevEpisode" class="btn btn-sm btn-outline btn-primary">Prev</button>
          <button id="currentEp" class="btn btn-sm btn-ghost btn-disabled w-auto text-base-content"
            >Episode {currentEpisodeNumber}</button
          >
          <button id="nextEpisode" class="btn btn-sm btn-outline btn-primary">Next</button>
        </div>
      </div>

      {/* BLOCK 2: Daftar Episode */}
      <div class="bg-base-300 rounded-lg shadow-xl p-4">
        <h2 class="font-bold text-base md:text-xl mb-3 text-base-content">Daftar Episode</h2>
        <div class="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 gap-2 overflow-auto max-h-64 scrollbar-thin scrollbar-thumb-primary scrollbar-track-base-200">
          {episodes.length > 0 ? (
            episodes.map(ep => (
              <a
                href={`/watch/${id}/${slug}?episode=${ep}`}
                class={`btn btn-sm ${ep == currentEpisodeNumber ? 'btn-primary' : 'btn-outline'}`}
              >
                {ep}
              </a>
            ))
          ) : (
            <p class="text-center text-base-content/70">Tidak ada data episode.</p>
          )}
        </div>
      </div>

      {/* BLOCK 3: Detail Anime & Sinopsis */}
      <div class="p-4 rounded-lg shadow-xl bg-base-300 w-11/12 mx-auto sm:w-auto sm:mx-0">
        <h1 class="text-xl sm:text-2xl md:text-3xl mb-6 text-primary">{data.results.title}</h1>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 items-start mb-6">
          {data.results.image && (
            <figure class="mb-4 md:mb-0 text-center w-full">
              <img
                src={data.results.image}
                alt={data.results.title}
                class="rounded-lg shadow-lg mx-auto max-h-150 object-contain w-full" {/* Tambah w-full pada img */}
              />
            </figure>
          )}

          <div>
            <Table data={data.results.details} />
          </div>
        </div>

        {/* SINPOSIS */}
        <h2 class="font-bold text-lg md:text-xl mt-6 mb-2 text-base-content">Sinopsis:</h2>
        <p set:html={data.results.description || "Sinopsis tidak tersedia."} class="text-base-content/90 leading-relaxed text-base" />
      </div>

    </div>
  </div>
</Layout>

<script>
  import { initWatchPlayer } from "/src/scripts/watch.js";

  const episodeInput = document.getElementById("episode");
  const initialEpisode = episodeInput ? episodeInput.value : null;

  document.addEventListener("astro:after-swap", () => {
    const updatedEpisodeInput = document.getElementById("episode");
    const updatedInitialEpisode = updatedEpisodeInput ? updatedEpisodeInput.value : null;
    initWatchPlayer(updatedInitialEpisode);
  });
  
  initWatchPlayer(initialEpisode);
</script>

<input id="episode" type="hidden" value={currentEpisodeNumber} />